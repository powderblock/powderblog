# Used for string.replace()
import string
import sys
import re

def markdown_to_HTML(filename):
    # Take input from the user:
    with open(filename, 'r') as content_file:
        md = content_file.read()

    # Have we found bold or italic characters yet?
    bold = False
    italics = False
    # No. That's why these are false.

    # Super Script:
    superScript = re.findall(r'^    superScript = re.findall(r'^\(.*?\)', md)
\(.*?\)', md)
    print superScript
    for i in range(len(superScript)):
                   newScript = superScript[i].replace("^(", "<sup>").replace(")", "</sup>")
                   md = md.replace(superScript[i], newScript)
    # Metadata code:
    postTitle = re.findall(r'title:.*?\n', md)[0]
    # This will give us the "raw" title, no newline, no surrounding text or code
    articleTitle = str(postTitle.replace("title:", "")).rstrip()
    md = md.replace(postTitle, "\n      <H1>"+articleTitle+"</H1>\n" + postTitle)

    newPostTitle = str(postTitle.replace("\n", "-->")).replace("title:", "\n      <!-- title:")
    md = md.replace(postTitle, newPostTitle)

    postDate = re.findall(r'date:.*?\n', md)
    newPostDate = str(postDate[0].replace("\n", "-->")).replace("date:", "\n      <!-- date:")
    md = md.replace(postDate[0], newPostDate)

    postAuthor = re.findall(r'author:.*?\n', md)
    newPostAuthor = str(postAuthor[0].replace("\n", "-->")).replace("author:", "\n      <!-- author:")
    md = md.replace(postAuthor[0], newPostAuthor)

    #Header code:
    allHeaders = re.findall(r'\#+ .*?\n', md, re.M)
    for i in range(0, len(allHeaders)):
        title = allHeaders[i].replace("# ", "").replace("#", "")
        if "###### " in allHeaders[i]:
            md = md.replace(allHeaders[i], "<H6>" + title + "</H6>")

        elif "##### " in allHeaders[i]:
            md = md.replace(allHeaders[i], "<H5>" + title + "</H5>")

        elif "#### " in allHeaders[i - 1]:
            md = md.replace(allHeaders[i], "<H4>" + title + "</H4>")

        elif "### " in allHeaders[i]:
            md = md.replace(allHeaders[i], "<H3>" + title + "</H3>")

        elif "## " in allHeaders[i]:
            md = md.replace(allHeaders[i], "<H2>" + title + "</H2>")

        elif "# " in allHeaders[i]:
            md = md.replace(allHeaders[i], "<H1>" + title + "</H1>")

    whole = re.findall(r'\[.*?\)', md)
    for i in range(0, len(whole)):
        whole = str(re.findall(r'\[.*?\)', md)[i - 1])

        link = str(re.findall(r'\(.*?\)', whole)[i - 1].replace("(", "").replace(")", ""))

        title = str(re.findall(r'\[.*?\]', whole)[i - 1].replace("[", "").replace("]", ""))

        md = md.replace(whole, "<a href = " + '"' + link + '">' + title + "</a>")

    # Replace some characters so the string is easier to work with:
    md = string.replace(md, "***", "*_")
    md = string.replace(md, "**", "_")
    md = string.replace(md, "__", "_")
    
    # Change the user input into a list:
    html = list(md)
    for letter in  range(len(html)):
        if html[letter] == "\n" and html[letter + 1] == "\n":
            html[letter] = "<br>"
        # Bold code:
        elif html[letter] == "_" and bold == False:
            html[letter] = "<strong>"
            # Awesome! We found a bold character! Switch that baby to true!
            bold = True

        elif html[letter] == "_" and bold == True:
            html[letter] = "</strong>"
            # That's all, folks!
            bold = False

        # Italics code:
        elif html[letter] == "*" and italics == False:
            html[letter] = "<em>"
            # Italic character found, sweet! Make sure our bool knows it.
            italics = True

        elif html[letter] == "*" and italics == True:
            # If the user did ***, switch current order so it ends </strong> </em>
            if html[letter + 1] == "_":
                html[letter] = "</strong>"
                html[letter + 1] = "</em>"
            else:
                html[letter] = "</em>"
            # No more italics for you, that's a shame. (End of it found.)
            italics = False

    # Rejoin the input back into a string from a list:
    html = "".join(html)
    #Save the file to the "html" directory:

    filename = filename.replace("/md/", "/html/").replace(".md", "")

    text_file = open(filename + ".html", "w+")
    with open("../content/default_content/header.html", 'r') as content_file:
        header = content_file.read().replace('href="content/theme/styles.css">', 'href="../../theme/styles.css">')
    
    with open("../content/default_content/footer.html", 'r') as content_file:
        footer = content_file.read()

    articleTitle = re.findall(r'<!-- title: +.*?-->', html)[0].replace("<!-- title:", "").replace("-->", "").replace(" ", "")
    pageTitle = re.findall(r'<title>+.*?</title>', header)[0]
    header = header.replace(pageTitle, "<title>" + articleTitle + "</title>")
    text_file.write(header)
    text_file.write(html)
    text_file.write("\n")
    text_file.write(footer)
    text_file.close()
